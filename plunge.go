package main

import (
	"database/sql"
	"fmt"
	"os"
	"strings"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

type Param struct {
	db *sql.DB
	rq string
}

func main() {
	db, err := sql.Open("mysql", "root:123456@tcp(localhost:3307)/stock?charset=utf8mb4")
	if err != nil {
		fmt.Printf("open db err:%s\n", err.Error())
		return
	}
	defer db.Close()
	pdb, perr := sql.Open("mysql", "homestead:secret@tcp(localhost:33060)/plunge?charset=utf8mb4")
	if perr != nil {
		fmt.Printf("open db perr:%s\n", perr.Error())
		return
	}
	defer pdb.Close()

	start := time.Now().UnixNano()

	rq := "2021-01-01"
	tname := "dayline"
	if len(os.Args) != 3 {
		fmt.Println("命令行参数数量错误,应该是3, 日期,表名 ; 目前长度是:", len(os.Args))
		os.Exit(1)
	}
	for k, v := range os.Args {
		if k == 1 {
			rq = v
		} else if k == 2 {
			tname = v
		}
	}

	//---------break out with vol
	cateName := strings.Replace(rq, "-", "", -1) + "admin" + "Vol"
	dataMapArray := breakwithvol(db, rq, 20, tname)
	remark := "Head and shoulders or box pattern wrapped around MA20. Auto generated by Plunge "
	SaveCategoyStock(pdb, cateName, cateName, remark, dataMapArray)

	end := time.Now().UnixNano()

	dataMapArray = breakwithvol(db, rq, 30, tname)
	remark = "Head and shoulders or box pattern wrapped around MA30. Auto generated by Plunge "
	SaveCategoyStock(pdb, cateName, cateName, remark, dataMapArray)

	dataMapArray = breakwithvol(db, rq, 60, tname)
	remark = "Head and shoulders or box pattern wrapped around MA60. Auto generated by Plunge"
	SaveCategoyStock(pdb, cateName, cateName, remark, dataMapArray)

	end = time.Now().UnixNano()
	fmt.Printf("dltp3l cost is :%d \n", (end-start)/1000)

	//---------getting chips
	cateName = strings.Replace(rq, "-", "", -1) + "admin" + "Chips"
	dataMapArray = getchips(db, rq, tname)
	remark = "Getting chips.Auto generated by Plunge "
	SaveCategoyStock(pdb, cateName, cateName, remark, dataMapArray)
	end = time.Now().UnixNano()
	fmt.Printf("xc cost is :%d \n", (end-start)/1000)

	// //---------continuous stars
	// cateName = strings.Replace(rq, "-", "", -1) + "admin" + "Star"
	dataMapArray = stars(db, rq, tname)
	// remark = "Continuous stars.Auto generated by Plunge "
	// SaveCategoyStock(pdb, cateName, cateName, remark, dataMapArray)

	// //---------support at the gap
	// cateName = strings.Replace(rq, "-", "", -1) + "admin" + "Gap"
	dataMapArray = suportwithgap(db, rq, tname)
	// remark = "Support at the gap .Auto generated by Plunge "
	// SaveCategoyStock(pdb, cateName, cateName, remark, dataMapArray)

	// end = time.Now().UnixNano()
	// fmt.Printf(" cost is :%d \n", (end-start)/1000)
}
